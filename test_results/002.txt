Wyvern compiler, version 0.1
Copyright Â© 2019 by Carlos Rivero, ITESM CEM.
This program has absolutely no warranty.

Included in this release:
   * Lexical analysis

===== Tokens from: "test_programs/002_binary.wyvern" =====
[1] {COMMENT, "/* File: 002_binary.wyvern
 * Converts decimal numbers into binary.
 * (C) 2019 Ariel Ortiz, ITESM CEM
 */", @(1, 1)}
[2] {COMMENT, "// Inverts in-place the contents of an array list.
", @(6, 2)}
[3] {IDENTIFIER, "reverse", @(7, 1)}
[4] {PARENTHESIS_OPEN, "(", @(7, 8)}
[5] {IDENTIFIER, "array", @(7, 9)}
[6] {PARENTHESIS_CLOSE, ")", @(7, 14)}
[7] {LLAVE_OPEN, "{", @(7, 16)}
[8] {VAR, "var", @(8, 5)}
[9] {IDENTIFIER, "start", @(8, 9)}
[10] {COMMA, ",", @(8, 14)}
[11] {IDENTIFIER, "finish", @(8, 16)}
[12] {COMMA, ",", @(8, 22)}
[13] {IDENTIFIER, "temp", @(8, 24)}
[14] {SEMICOLON, ";", @(8, 28)}
[15] {IDENTIFIER, "start", @(9, 5)}
[16] {ASSIGN, "=", @(9, 11)}
[17] {INT_LITERAL, "0", @(9, 13)}
[18] {SEMICOLON, ";", @(9, 14)}
[19] {IDENTIFIER, "finish", @(10, 5)}
[20] {ASSIGN, "=", @(10, 12)}
[21] {IDENTIFIER, "size", @(10, 14)}
[22] {PARENTHESIS_OPEN, "(", @(10, 18)}
[23] {IDENTIFIER, "array", @(10, 19)}
[24] {PARENTHESIS_CLOSE, ")", @(10, 24)}
[25] {NEG, "-", @(10, 26)}
[26] {INT_LITERAL, "1", @(10, 28)}
[27] {SEMICOLON, ";", @(10, 29)}
[28] {WHILE, "while", @(11, 5)}
[29] {PARENTHESIS_OPEN, "(", @(11, 11)}
[30] {IDENTIFIER, "start", @(11, 12)}
[31] {LESS, "<", @(11, 18)}
[32] {IDENTIFIER, "finish", @(11, 20)}
[33] {PARENTHESIS_CLOSE, ")", @(11, 26)}
[34] {LLAVE_OPEN, "{", @(11, 28)}
[35] {IDENTIFIER, "temp", @(12, 9)}
[36] {ASSIGN, "=", @(12, 14)}
[37] {IDENTIFIER, "get", @(12, 16)}
[38] {PARENTHESIS_OPEN, "(", @(12, 19)}
[39] {IDENTIFIER, "array", @(12, 20)}
[40] {COMMA, ",", @(12, 25)}
[41] {IDENTIFIER, "start", @(12, 27)}
[42] {PARENTHESIS_CLOSE, ")", @(12, 32)}
[43] {SEMICOLON, ";", @(12, 33)}
[44] {IDENTIFIER, "set", @(13, 9)}
[45] {PARENTHESIS_OPEN, "(", @(13, 12)}
[46] {IDENTIFIER, "array", @(13, 13)}
[47] {COMMA, ",", @(13, 18)}
[48] {IDENTIFIER, "start", @(13, 20)}
[49] {COMMA, ",", @(13, 25)}
[50] {IDENTIFIER, "get", @(13, 27)}
[51] {PARENTHESIS_OPEN, "(", @(13, 30)}
[52] {IDENTIFIER, "array", @(13, 31)}
[53] {COMMA, ",", @(13, 36)}
[54] {IDENTIFIER, "finish", @(13, 38)}
[55] {PARENTHESIS_CLOSE, ")", @(13, 44)}
[56] {PARENTHESIS_CLOSE, ")", @(13, 45)}
[57] {SEMICOLON, ";", @(13, 46)}
[58] {IDENTIFIER, "set", @(14, 9)}
[59] {PARENTHESIS_OPEN, "(", @(14, 12)}
[60] {IDENTIFIER, "array", @(14, 13)}
[61] {COMMA, ",", @(14, 18)}
[62] {IDENTIFIER, "finish", @(14, 20)}
[63] {COMMA, ",", @(14, 26)}
[64] {IDENTIFIER, "temp", @(14, 28)}
[65] {PARENTHESIS_CLOSE, ")", @(14, 32)}
[66] {SEMICOLON, ";", @(14, 33)}
[67] {IDENTIFIER, "start", @(15, 9)}
[68] {INCREMENT, "++", @(15, 14)}
[69] {SEMICOLON, ";", @(15, 16)}
[70] {IDENTIFIER, "finish", @(16, 9)}
[71] {DECREMENT, "--", @(16, 15)}
[72] {SEMICOLON, ";", @(16, 17)}
[73] {LLAVE_CLOSE, "}", @(17, 5)}
[74] {LLAVE_CLOSE, "}", @(18, 1)}
[75] {COMMENT, "// Converts num to a string with its binary representation.
", @(20, 1)}
[76] {IDENTIFIER, "binary", @(21, 1)}
[77] {PARENTHESIS_OPEN, "(", @(21, 7)}
[78] {IDENTIFIER, "num", @(21, 8)}
[79] {PARENTHESIS_CLOSE, ")", @(21, 11)}
[80] {LLAVE_OPEN, "{", @(21, 13)}
[81] {VAR, "var", @(22, 5)}
[82] {IDENTIFIER, "result", @(22, 9)}
[83] {COMMA, ",", @(22, 15)}
[84] {IDENTIFIER, "remainder", @(22, 17)}
[85] {SEMICOLON, ";", @(22, 26)}
[86] {IF, "if", @(23, 5)}
[87] {PARENTHESIS_OPEN, "(", @(23, 8)}
[88] {IDENTIFIER, "num", @(23, 9)}
[89] {LESS, "<", @(23, 13)}
[90] {ASSIGN, "=", @(23, 14)}
[91] {INT_LITERAL, "0", @(23, 16)}
[92] {PARENTHESIS_CLOSE, ")", @(23, 17)}
[93] {LLAVE_OPEN, "{", @(23, 19)}
[94] {RETURN, "return", @(24, 9)}
[95] {STRING_LITERAL, ""0"", @(24, 16)}
[96] {SEMICOLON, ";", @(24, 19)}
[97] {LLAVE_CLOSE, "}", @(25, 5)}
[98] {IDENTIFIER, "result", @(26, 5)}
[99] {ASSIGN, "=", @(26, 12)}
[100] {STRING_LITERAL, """", @(26, 14)}
[101] {SEMICOLON, ";", @(26, 16)}
[102] {WHILE, "while", @(27, 5)}
[103] {PARENTHESIS_OPEN, "(", @(27, 11)}
[104] {IDENTIFIER, "num", @(27, 12)}
[105] {GREATER, ">", @(27, 16)}
[106] {INT_LITERAL, "0", @(27, 18)}
[107] {PARENTHESIS_CLOSE, ")", @(27, 19)}
[108] {LLAVE_OPEN, "{", @(27, 21)}
[109] {IDENTIFIER, "remainder", @(28, 9)}
[110] {ASSIGN, "=", @(28, 19)}
[111] {IDENTIFIER, "num", @(28, 21)}
[112] {MOD, "%", @(28, 25)}
[113] {INT_LITERAL, "2", @(28, 27)}
[114] {SEMICOLON, ";", @(28, 28)}
[115] {IDENTIFIER, "add", @(29, 9)}
[116] {PARENTHESIS_OPEN, "(", @(29, 12)}
[117] {IDENTIFIER, "result", @(29, 13)}
[118] {COMMA, ",", @(29, 19)}
[119] {IDENTIFIER, "remainder", @(29, 21)}
[120] {PLUS, "+", @(29, 31)}
[121] {CHAR_LITERAL, "'0'", @(29, 33)}
[122] {PARENTHESIS_CLOSE, ")", @(29, 36)}
[123] {SEMICOLON, ";", @(29, 37)}
[124] {IDENTIFIER, "num", @(30, 9)}
[125] {ASSIGN, "=", @(30, 13)}
[126] {IDENTIFIER, "num", @(30, 15)}
[127] {DIV, "/", @(30, 19)}
[128] {INT_LITERAL, "2", @(30, 21)}
[129] {SEMICOLON, ";", @(30, 22)}
[130] {LLAVE_CLOSE, "}", @(31, 5)}
[131] {IDENTIFIER, "reverse", @(32, 5)}
[132] {PARENTHESIS_OPEN, "(", @(32, 12)}
[133] {IDENTIFIER, "result", @(32, 13)}
[134] {PARENTHESIS_CLOSE, ")", @(32, 19)}
[135] {SEMICOLON, ";", @(32, 20)}
[136] {RETURN, "return", @(33, 5)}
[137] {IDENTIFIER, "result", @(33, 12)}
[138] {SEMICOLON, ";", @(33, 18)}
[139] {LLAVE_CLOSE, "}", @(34, 1)}
[140] {IDENTIFIER, "main", @(36, 1)}
[141] {PARENTHESIS_OPEN, "(", @(36, 5)}
[142] {PARENTHESIS_CLOSE, ")", @(36, 6)}
[143] {LLAVE_OPEN, "{", @(36, 8)}
[144] {VAR, "var", @(37, 5)}
[145] {IDENTIFIER, "option", @(37, 9)}
[146] {COMMA, ",", @(37, 15)}
[147] {IDENTIFIER, "num", @(37, 17)}
[148] {SEMICOLON, ";", @(37, 20)}
[149] {WHILE, "while", @(38, 5)}
[150] {PARENTHESIS_OPEN, "(", @(38, 11)}
[151] {TRUE, "true", @(38, 12)}
[152] {PARENTHESIS_CLOSE, ")", @(38, 16)}
[153] {LLAVE_OPEN, "{", @(38, 18)}
[154] {IDENTIFIER, "prints", @(39, 9)}
[155] {PARENTHESIS_OPEN, "(", @(39, 15)}
[156] {STRING_LITERAL, ""Input a number: "", @(39, 16)}
[157] {PARENTHESIS_CLOSE, ")", @(39, 34)}
[158] {SEMICOLON, ";", @(39, 35)}
[159] {IDENTIFIER, "num", @(40, 9)}
[160] {ASSIGN, "=", @(40, 13)}
[161] {IDENTIFIER, "readi", @(40, 15)}
[162] {PARENTHESIS_OPEN, "(", @(40, 20)}
[163] {PARENTHESIS_CLOSE, ")", @(40, 21)}
[164] {SEMICOLON, ";", @(40, 22)}
[165] {IDENTIFIER, "prints", @(41, 9)}
[166] {PARENTHESIS_OPEN, "(", @(41, 15)}
[167] {STRING_LITERAL, ""Conversion to binary of that number: "", @(41, 16)}
[168] {PARENTHESIS_CLOSE, ")", @(41, 55)}
[169] {SEMICOLON, ";", @(41, 56)}
[170] {IDENTIFIER, "prints", @(42, 9)}
[171] {PARENTHESIS_OPEN, "(", @(42, 15)}
[172] {IDENTIFIER, "binary", @(42, 16)}
[173] {PARENTHESIS_OPEN, "(", @(42, 22)}
[174] {IDENTIFIER, "num", @(42, 23)}
[175] {PARENTHESIS_CLOSE, ")", @(42, 26)}
[176] {PARENTHESIS_CLOSE, ")", @(42, 27)}
[177] {SEMICOLON, ";", @(42, 28)}
[178] {IDENTIFIER, "println", @(43, 9)}
[179] {PARENTHESIS_OPEN, "(", @(43, 16)}
[180] {PARENTHESIS_CLOSE, ")", @(43, 17)}
[181] {SEMICOLON, ";", @(43, 18)}
[182] {IDENTIFIER, "prints", @(44, 9)}
[183] {PARENTHESIS_OPEN, "(", @(44, 15)}
[184] {STRING_LITERAL, ""Convert another number? "", @(44, 16)}
[185] {PARENTHESIS_CLOSE, ")", @(44, 42)}
[186] {SEMICOLON, ";", @(44, 43)}
[187] {IDENTIFIER, "option", @(45, 9)}
[188] {ASSIGN, "=", @(45, 16)}
[189] {IDENTIFIER, "reads", @(45, 18)}
[190] {PARENTHESIS_OPEN, "(", @(45, 23)}
[191] {PARENTHESIS_CLOSE, ")", @(45, 24)}
[192] {SEMICOLON, ";", @(45, 25)}
[193] {IF, "if", @(46, 9)}
[194] {PARENTHESIS_OPEN, "(", @(46, 12)}
[195] {IDENTIFIER, "size", @(46, 13)}
[196] {PARENTHESIS_OPEN, "(", @(46, 17)}
[197] {IDENTIFIER, "option", @(46, 18)}
[198] {PARENTHESIS_CLOSE, ")", @(46, 24)}
[199] {EQUAL, "==", @(46, 26)}
[200] {INT_LITERAL, "0", @(46, 29)}
[201] {PARENTHESIS_CLOSE, ")", @(46, 30)}
[202] {LLAVE_OPEN, "{", @(46, 32)}
[203] {IDENTIFIER, "option", @(47, 13)}
[204] {ASSIGN, "=", @(47, 20)}
[205] {CHAR_LITERAL, "'N'", @(47, 22)}
[206] {SEMICOLON, ";", @(47, 25)}
[207] {LLAVE_CLOSE, "}", @(48, 9)}
[208] {ELSE, "else", @(48, 11)}
[209] {LLAVE_OPEN, "{", @(48, 16)}
[210] {IDENTIFIER, "option", @(49, 13)}
[211] {ASSIGN, "=", @(49, 20)}
[212] {IDENTIFIER, "get", @(49, 22)}
[213] {PARENTHESIS_OPEN, "(", @(49, 25)}
[214] {IDENTIFIER, "option", @(49, 26)}
[215] {COMMA, ",", @(49, 32)}
[216] {INT_LITERAL, "0", @(49, 34)}
[217] {PARENTHESIS_CLOSE, ")", @(49, 35)}
[218] {SEMICOLON, ";", @(49, 36)}
[219] {LLAVE_CLOSE, "}", @(50, 9)}
[220] {IF, "if", @(51, 9)}
[221] {PARENTHESIS_OPEN, "(", @(51, 12)}
[222] {IDENTIFIER, "option", @(51, 13)}
[223] {NOTEQUAL, "!=", @(51, 20)}
[224] {CHAR_LITERAL, "'Y'", @(51, 23)}
[225] {AND, "&&", @(51, 27)}
[226] {IDENTIFIER, "option", @(51, 30)}
[227] {NOTEQUAL, "!=", @(51, 37)}
[228] {CHAR_LITERAL, "'y'", @(51, 40)}
[229] {PARENTHESIS_CLOSE, ")", @(51, 43)}
[230] {LLAVE_OPEN, "{", @(51, 45)}
[231] {BREAK, "break", @(52, 13)}
[232] {SEMICOLON, ";", @(52, 18)}
[233] {LLAVE_CLOSE, "}", @(53, 9)}
[234] {LLAVE_CLOSE, "}", @(54, 5)}
[235] {LLAVE_CLOSE, "}", @(55, 1)}
[236] {EOF, "", @(56, 1)}
